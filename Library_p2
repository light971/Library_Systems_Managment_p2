-- Library Managment System Project 2 

-- Creating branch Table
CREATE TABLE branch (

    branch_id VARCHAR(10) PRIMARY KEY,
    manager_id VARCHAR(10),	
    branch_address VARCHAR(55),	
    contact_no VARCHAR(10)
);

-- Creating employees Table
CREATE TABLE employees (
    emp_id	 VARCHAR(10) PRIMARY KEY,
    emp_name VARCHAR(25),	
    position VARCHAR(15),	
    salary INT,
    branch_id VARCHAR(25) -- FK
);


-- Creating books Table
CREATE TABLE books (
    isbn VARCHAR(20) PRIMARY KEY,
    book_title VARCHAR(75),	
    category VARCHAR(10),	
    rental_price FLOAT,	
    status	VARCHAR(15),
    author VARCHAR(35),	
    publisher VARCHAR(55)
);


-- Creating members Table
CREATE TABLE members (
    member_id VARCHAR(10) PRIMARY KEY,	
    member_name VARCHAR(25),	
    member_address VARCHAR(75),	
    reg_date DATE
);


-- Creating issued_status Table
CREATE TABLE issued_status (
    issued_id VARCHAR(10) PRIMARY KEY,	
    issued_member_id	VARCHAR(10), -- FK
    issued_book_name	VARCHAR(75),
    issued_date DATE,	
    issued_book_isbn	VARCHAR(25), -- FK
    issued_emp_id VARCHAR(10) -- FK
);


-- Creating return_status Table
CREATE TABLE return_status (
    return_id VARCHAR(10) PRIMARY KEY,	
    issued_id VARCHAR(10), -- FK	
    return_book_name VARCHAR(75),	
    return_date DATE,	
    return_book_isbn VARCHAR(20)
);

-- FOREIGN KEY
ALTER TABLE issued_status RENAME TO issued_status_old;

CREATE TABLE issued_status (
     issued_id VARCHAR(10) PRIMARY KEY,	
     issued_member_id VARCHAR(10), -- FK
     issued_book_name VARCHAR(75),
     issued_date DATE,	
     issued_book_isbn VARCHAR(25), -- FK
     issued_emp_id VARCHAR(10), -- FK
     FOREIGN KEY (issued_member_id) REFERENCES members(member_id),
     FOREIGN KEY (issued_book_isbn) REFERENCES books(isbn),
     FOREIGN KEY (issued_emp_id) REFERENCES employees(emp_id)
);
DROP TABLE issued_status_old;


ALTER TABLE employees RENAME TO employees_old;

CREATE TABLE employees (
    emp_id	 VARCHAR(10) PRIMARY KEY,
    emp_name VARCHAR(25),	
    position VARCHAR(15),	
    salary INT,
    branch_id VARCHAR(25), -- FK
    FOREIGN KEY (branch_id) REFERENCES branch(branch_id)
);
DROP TABLE employees_old;


ALTER TABLE return_status RENAME TO return_status_old;
CREATE TABLE return_status (
      return_id VARCHAR(10) PRIMARY KEY,	
      issued_id VARCHAR(10), 	
      return_book_name VARCHAR(75),	
      return_date DATE,	
      return_book_isbn VARCHAR(20), -- FK	
      FOREIGN KEY (return_book_isbn) REFERENCES books(isbn)
);
DROP TABLE return_status_old;


SELECT * FROM books;
SELECT * FROM branch;
SELECT * FROM employees;
SELECT * FROM issued_status;
SELECT * FROM members;
SELECT * FROM return_status;

-- Projet task
-- Task 1. Create a New Book Record -- "978-1-60129-456-2', 'To Kill a Mockingbird', 'Classic', 6.00, 'yes', 'Harper Lee', 'J.B. Lippincott & Co.')"
SELECT * FROM books;
INSERT INTO books(isbn, book_title, category, rental_price, status, author, publisher)
VALUES('978-1-60129-456-2', 'To Kill a Mockingbird', 'Classic', 6.00 , 'yes', 'Harper Lee', 'J.B. Lippincott & Co.'); 

-- Task 2: Update an Existing Member's Address
UPDATE members
SET member_address = '125 Main St'
WHERE member_id = 'C101';

-- Task 3: Delete a Record from the Issued Status Table 
-- Objective: Delete the record with issued_id = 'IS121' from the issued_status table.
DELETE FROM issued_status
WHERE issued_id = 'IS121';

-- Retrieve All Books Issued by a Specific Employee 
-- Objective: Select all books issued by the employee with emp_id = 'E101'.
SELECT * FROM issued_status
WHERE issued_emp_id = 'E101';

-- Task 5: List Members Who Have Issued More Than One Book 
-- Objective: Use GROUP BY to find members who have issued more than one book.
SELECT issued_emp_id,
COUNT(*)
FROM issued_status
GROUP BY issued_emp_id
HAVING COUNT(*) > 1;

-- CTAS
-- Task 6: Create Summary Tables: Used CTAS to generate new tables based on query results - each book and total book_issued_cnt**
CREATE TABLE book_issued_cnt AS
SELECT b.isbn, b.book_title, COUNT(ist.issued_id) AS issue_count
FROM issued_status as ist
JOIN books as b
ON ist.issued_book_isbn = b.isbn
GROUP BY b.isbn, b.book_title;

SELECT *FROM book_issued_cnt;

--Data Analysis & Findings
--Task 7. Retrieve All Books in a Specific Category:
SELECT * FROM books
WHERE category = 'Classic';

-- Task 8: Find Total Rental Income by Category:
SELECT 
    b.category,
    SUM(b.rental_price),
    COUNT(*)
FROM 
issued_status as ist
JOIN
books as b
ON b.isbn = ist.issued_book_isbn
GROUP BY  b.category;

-- List Members Who Registered in the Last 180 Days:
SELECT *
FROM members
WHERE reg_date >= DATE('now', '-180 days');

-- Task 10 List Employees with Their Branch Manager's Name and their branch details:
SELECT 
    e1.emp_id,
    e1.emp_name,
    e1.position,
    e1.salary,
    b.*,
    e2.emp_name as manager
FROM employees as e1
JOIN 
branch as b
ON e1.branch_id = b.branch_id    
JOIN
employees as e2
ON e2.emp_id = b.manager_id;

-- Task 11 Create a Table of Books with Rental Price Above a Certain Threshold:
CREATE TABLE expensive_books AS
SELECT * FROM books
WHERE rental_price > 7.00;

SELECT * FROM expensive_books;

-- Task 12: Retrieve the List of Books Not Yet Returned
SELECT * FROM issued_status as ist
LEFT JOIN
return_status as rs
ON rs.issued_id = ist.issued_id
WHERE rs.return_id IS NULL;


-- Advanced SQL Operations
-- Task 13: Identify Members with Overdue Books
-- Write a query to identify members who have overdue books (assume a 30-day return period). 
-- Display the member's_id, member's name, book title, issue date, and days overdue.

SELECT 
    ist.issued_member_id,
    m.member_name,
    bk.book_title,
    ist.issued_date,
    -- rs.return_date,
    CURRENT_DATE - ist.issued_date as over_dues_days
FROM issued_status as ist
JOIN 
members as m
    ON m.member_id = ist.issued_member_id
JOIN 
books as bk
ON bk.isbn = ist.issued_book_isbn
LEFT JOIN 
return_status as rs
ON rs.issued_id = ist.issued_id
WHERE 
    rs.return_date IS NULL
    AND
    (CURRENT_DATE - ist.issued_date) > 30
ORDER BY 1;

-- Task 14: Update Book Status on Return
--Write a query to update the status of books in the books table to "Yes" when they are returned (based on entries in the return_status table).

-- 1️⃣ Définir les variables manuellement (à la place du DECLARE)
-- Remplace les valeurs entre guillemets par celles que tu veux tester
-- Exemple : RS138 pour return_id, IS135 pour issued_id
-- et 'Good' pour la qualité du livre

-- Paramètres simulés
-- (en SQLite, il n’y a pas de variables dans les scripts de base)
-- Donc on remplace directement dans les requêtes.

-- 2️⃣ Insertion dans return_status
INSERT INTO return_status (return_id, issued_id, return_date, return_book_name, return_book_isbn)
SELECT 
    'RS138',                             -- p_return_id
    'IS135',                             -- p_issued_id
    DATE('now') AS return_date,          -- p_return_date
    issued_book_name,                    -- récupéré depuis issued_status
    issued_book_isbn                     -- récupéré depuis issued_status
FROM issued_status
WHERE issued_id = 'IS135';

-- 3️⃣ Mise à jour du statut du livre
UPDATE books
SET status = 'yes'
WHERE isbn = (
    SELECT issued_book_isbn 
    FROM issued_status 
    WHERE issued_id = 'IS135'
);

-- 4️⃣ Vérification (affiche le livre retourné)
SELECT 
    'Book returned:' AS message, 
    issued_book_name AS returned_book_name
FROM issued_status
WHERE issued_id = 'IS135';


-- Task 15: Branch Performance Report
-- Create a query that generates a performance report for each branch, showing the number of books issued, 
-- the number of books returned, and the total revenue generated from book rentals.
CREATE TABLE branch_reports
AS
SELECT 
    b.branch_id,
    b.manager_id,
    COUNT(ist.issued_id) as number_book_issued,
    COUNT(rs.return_id) as number_of_book_return,
    SUM(bk.rental_price) as total_revenue
FROM issued_status as ist
JOIN 
employees as e
ON e.emp_id = ist.issued_emp_id
JOIN
branch as b
ON e.branch_id = b.branch_id
LEFT JOIN
return_status as rs
ON rs.issued_id = ist.issued_id
JOIN 
books as bk
ON ist.issued_book_isbn = bk.isbn
GROUP BY 1, 2;

SELECT * FROM branch_reports;

-- Task 16: CTAS: Create a Table of Active Members
-- Use the CREATE TABLE AS (CTAS) statement to create a new table active_members containing members 
-- who have issued at least one book in the last 2 months.


CREATE TABLE active_members
AS
SELECT * FROM members
WHERE member_id IN (SELECT 
                        DISTINCT issued_member_id   
                    FROM issued_status
                    WHERE 
                        issued_date >= DATE('now', '-2 month')
                    );

SELECT * FROM active_members;


-- Task 17: Find Employees with the Most Book Issues Processed
-- Write a query to find the top 3 employees who have processed the most book issues. 
-- Display the employee name, number of books processed, and their branch.

SELECT 
    e.emp_name,
    b.*,
    COUNT(ist.issued_id) as no_book_issued
FROM issued_status as ist
JOIN
employees as e
ON e.emp_id = ist.issued_emp_id
JOIN
branch as b
ON e.branch_id = b.branch_id
GROUP BY 1, 2;

-- Task 18: Identify Members Issuing High-Risk Books
-- Write a query to identify members who have issued books more than twice with the status "damaged" in the books table. 
-- Display the member name, book title, and the number of times they've issued damaged books.

SELECT 
    m.member_name,
    b.book_title,
    COUNT(i.issued_id) AS times_issued_damaged
FROM issued_status i
JOIN books b ON i.issued_book_isbn = b.isbn
JOIN members m ON i.issued_member_id = m.member_id
WHERE b.status = 'damaged'
GROUP BY m.member_name, b.book_title
HAVING COUNT(i.issued_id) > 2
ORDER BY times_issued_damaged DESC;

-- Task 19: Stored Procedure Objective: Create a stored procedure to manage the status of books in a library system. 
-- Description: Write a stored procedure that updates the status of a book in the library based on its issuance. 
-- The procedure should function as follows: The stored procedure should take the book_id as an input parameter. 
-- The procedure should first check if the book is available (status = 'yes'). 
-- If the book is available, it should be issued, and the status in the books table should be updated to 'no'. 
-- If the book is not available (status = 'no'), the procedure should return an error message indicating that the book is currently not available.

-- Simulation de issue_book dans SQLite
-- paramètres manuels
-- p_issued_member_id = 'C108'
-- p_issued_book_isbn = '978-0-553-29698-2'
-- p_issued_emp_id = 'E104'

-- Vérifie la disponibilité du livre
SELECT status FROM books WHERE isbn = '978-0-553-29698-2';

-- Si le livre est disponible ('yes'), exécute ceci :
INSERT INTO issued_status(issued_id, issued_member_id, issued_date, issued_book_isbn, issued_emp_id)
SELECT 
    'IS' || printf('%03d', COALESCE(MAX(CAST(substr(issued_id, 3) AS INTEGER)), 0) + 1),
    'C108',
    DATE('now'),
    '978-0-553-29698-2',
    'E104'
FROM issued_status;

UPDATE books
SET status = 'no'
WHERE isbn = '978-0-553-29698-2';

SELECT 'Book records added successfully' AS message;

-- Vérifie le résultat
SELECT * FROM books WHERE isbn = '978-0-553-29698-2';
SELECT * FROM issued_status WHERE issued_id = 'IS155';


-- Task 20: Create Table As Select (CTAS) Objective: Create a CTAS (Create Table As Select) query to identify overdue books and calculate fines.
-- Description: Write a CTAS query to create a new table that lists each member and the books they have issued but not returned within 30 days. 
-- The table should include: The number of overdue books. 
-- The total fines, with each day's fine calculated at $0.50. The number of books issued by each member. 
-- The resulting table should show: Member ID Number of overdue books Total fines

CREATE TABLE overdue_books_summary AS
SELECT 
    m.member_id,
    
    -- nombre de livres actuellement en retard
    COUNT(CASE 
        WHEN r.return_id IS NULL 
             AND julianday('now') - julianday(i.issued_date) > 30
        THEN 1 
    END) AS overdue_books,
    
    -- total des amendes (0,5 $ par jour de retard)
    SUM(
        CASE 
            WHEN r.return_id IS NULL 
                 AND julianday('now') - julianday(i.issued_date) > 30
            THEN (julianday('now') - julianday(i.issued_date) - 30) * 0.5
            ELSE 0
        END
    ) AS total_fines,
    
    -- nombre total de livres empruntés
    COUNT(i.issued_id) AS total_books_issued

FROM members m
LEFT JOIN issued_status i ON m.member_id = i.issued_member_id
LEFT JOIN return_status r ON i.issued_id = r.issued_id
GROUP BY m.member_id;

SELECT * FROM overdue_books_summary;